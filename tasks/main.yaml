- name: "Include config for {{ ansible_os_family }} if it exists"
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family }}.yaml"
      skip: true

- name: "Ensure tinc is installed"
  become: true
  package:
    name: "{{ package }}"
    state: present

- name: "Ensure the directories for {{ network.name }} exist"
  become: true
  file:
    path: "{{ prefix }}/etc/tinc/{{ network.name }}"
    state: directory

- name: "Install tinc-up"
  become: true
  template:
    src: tinc-up.j2
    dest: "{{ prefix }}/etc/tinc/{{ network.name }}/tinc-up"
    mode: 0755

- name: "Install tinc-down"
  become: true
  template:
    src: tinc-down.j2
    dest: "{{ prefix }}/etc/tinc/{{ network.name }}/tinc-down"
    mode: 0755

- name: "Setup tinc network"
  become: true
  template:
    src: tinc.j2
    dest: "{{ prefix }}/etc/tinc/{{ network.name }}/tinc.conf"

- name: "Ensure the hosts directory exists"
  become: true
  file:
    path: "{{ prefix }}/etc/tinc/{{ network.name }}/hosts"
    state: directory

- name: "Setup hosts"
  become: true
  template:
    src: host.j2
    dest: "{{ prefix }}/etc/tinc/{{ network.name }}/hosts/{{ item.value.name|default(item.key) }}"
  with_dict: "{{ network.nodes }}"

- name: "Ensure private RSA key exists"
  stat:
    path: "{{ prefix }}/etc/tinc/{{ network.name }}/rsa_key.priv"
  register: private_key

- name: "Generate private RSA key"
  when: not private_key.stat.exists
  ignore_errors: yes
  become: true
  shell: "{{ binary }} -n {{ network.name|quote }} -K"
  register: generate_key_old

- name: "Generate private RSA key using new interface"
  when:
    - not private_key.stat.exists
    - generate_key_old.failed|default(False)
  become: true
  shell: "{{ binary }} -n {{ network.name|quote }} generate-keys"
